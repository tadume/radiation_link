require: "rubocop-rspec"

# 日本語だと「〜の場合」になるので suffix でないと対応できない
RSpec/ContextWording:
  Enabled: false

# subject はコピペ可搬性よりもそのまま USAGE であって欲しい
RSpec/DescribedClass:
  EnforcedStyle: explicit

# it が一つしか無いような context では空行を開ける方が読みづらい
#   context "when foo is bar" do
#     let(:foo) { bar }
#     it { is_expected.to do_something }
#   end
RSpec/EmptyLineAfterFinalLet:
  Enabled: false

# each で回したり aggregate_failures 使ってたりすると厳しい。
# feature spec は exclude でも良いかもしれない。
# ヒアドキュメント使うと一瞬で超えるので disable も検討。
RSpec/ExampleLength:
  Max: 8

# block の方がテスト対象が
# * `{}` の前後のスペースと相まって目立つ
# * 普段書く形と同じなので自然に脳内に入ってくる
RSpec/ExpectChange:
  EnforcedStyle: block

# one-liner の should は書きやすいし意味が通りやすいし副作用も無いので撥ねる必要がない。
# ただ expect 派に対して強制するほどでもないので統一はしない。
RSpec/ImplicitExpect:
  Enabled: false

# let を使うのは context 間で条件が違うものが存在する時だけにしたい。
# before の方が事前条件を整えていることが分かりやすい。
RSpec/InstanceVariable:
  Enabled: false

# 変に名前つけて呼ぶ方が分かりづらい。
# テスト対象メソッドを呼ぶだけの subject 以外を書かないようにする方が効く。
RSpec/NamedSubject:
  Enabled: false

# Model
#  `- #method
#      |- 頻出ケースのテスト 1
#      |- 頻出ケースのテスト 2
#      `- レアケース
#          |- レアケースのテスト 1
#          `- レアケースのテスト 2
# のように括り出すと、レアケースのテストを読み飛ばせるようになり
# テストを読む人にやさしくなる。
# デフォルトの 3 より少し緩めてもヨサソウ。
RSpec/NestedGroups:
  Max: 4

# ブロックは初見だと返り値を書いていると気づけないので and_return にしたいが、
# ブロックの方が見た目がスッキリして見やすいので、どちらでもお好きにどうぞ。
RSpec/ReturnFromStub:
  Enabled: false
# 警告追加分------------------------------------------
RSpec/BeEmpty: # new in 2.20
  Enabled: true
RSpec/BeEq: # new in 2.9.0
  Enabled: true
RSpec/BeNil: # new in 2.9.0
  Enabled: true
RSpec/ChangeByZero: # new in 2.11
  Enabled: true
RSpec/ContainExactly: # new in 2.19
  Enabled: true
RSpec/DuplicatedMetadata: # new in 2.16
  Enabled: true
RSpec/EmptyMetadata: # new in 2.24
  Enabled: true
RSpec/Eq: # new in 2.24
  Enabled: true
RSpec/ExcessiveDocstringSpacing: # new in 2.5
  Enabled: true
RSpec/IdenticalEqualityAssertion: # new in 2.4
  Enabled: true
RSpec/IndexedLet: # new in 2.20
  Enabled: true
RSpec/MatchArray: # new in 2.19
  Enabled: true
RSpec/MetadataStyle: # new in 2.24
  Enabled: true
RSpec/NoExpectationExample: # new in 2.13
  Enabled: true
RSpec/PendingWithoutReason: # new in 2.16
  Enabled: true
RSpec/ReceiveMessages: # new in 2.23
  Enabled: true
RSpec/RedundantAround: # new in 2.19
  Enabled: true
RSpec/RedundantPredicateMatcher: # new in 2.26
  Enabled: true
RSpec/RemoveConst: # new in 2.26
  Enabled: true
RSpec/SkipBlockInsideExample: # new in 2.19
  Enabled: true
RSpec/SortMetadata: # new in 2.14
  Enabled: true
RSpec/SpecFilePathFormat: # new in 2.24
  Enabled: true
RSpec/SpecFilePathSuffix: # new in 2.24
  Enabled: true
RSpec/SubjectDeclaration: # new in 2.5
  Enabled: true
RSpec/VerifiedDoubleReference: # new in 2.10.0
  Enabled: true
RSpec/Rails/AvoidSetupHook: # new in 2.4
  Enabled: true
RSpec/Rails/HaveHttpStatus: # new in 2.12
  Enabled: true
RSpec/Rails/InferredSpecType: # new in 2.14
  Enabled: true
RSpec/Rails/MinitestAssertions: # new in 2.17
  Enabled: true
RSpec/Rails/NegationBeValid: # new in 2.23
  Enabled: true
RSpec/Rails/TravelAround: # new in 2.19
  Enabled: true
